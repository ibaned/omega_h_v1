#!/bin/bash
# vim: set filetype=sh

if [[ $1 == -h ]] || [[ $1 == --help ]]; then
    cat << 'EOF'
`configure' configures omega_h to adapt to many kinds of systems.

Usage: ./configure [VAR=VALUE]... [OPTION]... 

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

Optional Features:
  --disable-FEATURE       do not include FEATURE
  --enable-debug          adds "-g -O0" to CFLAGS
  --enable-shared         build libomega_h.so in addition to libomega_h.a
  --enable-xsdk-defaults  configure in xSDK compliant mode.
                          this implies --enable-debug, --enable-shared
                          and --with-mpi.

Optional Packages:
  --with-zlib=PREFIX      same as --with-zlib, specifies lib and include
                          based on the given PREFIX.
  --with-zlib             use ZLib for compression. when specified, all
                          .vtu files will be written in compressed form.
                          --with-zlib-lib must also be specified.
  --with-zlib-include="-I..."
                          Specifies the necessary CFLAGS to include ZLib
                          header files
  --with-zlib-lib=ARG
                          Specifies the necessary LDLIBS to link to ZLib
  --with-mpi              Parallel support and partitioning via MPI.
                          It is recommended to specify an MPI compiler
                          wrapper with CC=mpicc.
  --without-mpi3          Do not use MPI 3.0 features even if available
  --with-openmp           Parallelize most operations using OpenMP
  --with-cuda             Parallelize most operations using CUDA.
                          All arrays returned by the API will be in
                          device memory.
                          Do not combine this with --with-openmp.
  --with-valgrind         Run all tests under Valgrind
  --with-valgrind=EXE     Same as --with-valgrind, specifies the path of
                          the valgrind program
  --with-patience         Run all tests, even the ones that take a bit
                          more time.
EOF
exit
fi

rm -f config.mk

echo "# Auto-generated by ./configure $@" >> config.mk

if ! [ -z ${CC+x} ]; then
  echo "CC = $CC" >> config.mk
fi
if ! [ -z ${CPP+x} ]; then
  echo "CPP = $CPP" >> config.mk
fi
if ! [ -z ${CFLAGS+x} ]; then
  echo "CFLAGS = $CFLAGS" >> config.mk
fi
if ! [ -z ${LDFLAGS+x} ]; then
  echo "LDFLAGS = $LDFLAGS" >> config.mk
fi
if ! [ -z ${LDLIBS+x} ]; then
  echo "LDLIBS = $LDLIBS" >> config.mk
fi

while [ "$1" != "" ]; do
  if [[ $1 == --prefix=* ]]; then
    echo "PREFIX = ${1#--prefix=}" >> config.mk
  elif [[ $1 == CC=* ]]; then
    echo "CC = ${1#CC=}" >> config.mk
  elif [[ $1 == CPP=* ]]; then
    echo "CPP = ${1#CPP=}" >> config.mk
  elif [[ $1 == CFLAGS=* ]]; then
    echo "CFLAGS = ${1#CFLAGS=}" >> config.mk
  elif [[ $1 == LDFLAGS=* ]]; then
    echo "LDFLAGS = ${1#LDFLAGS=}" >> config.mk
  elif [[ $1 == LDLIBS=* ]]; then
    echo "LDLIBS = ${1#LDLIBS=}" >> config.mk
  elif [[ $1 == --enable-debug ]]; then
    echo "DEBUG = 1" >> config.mk
  elif [[ $1 == --disable-debug ]]; then
    echo "DEBUG = 0" >> config.mk
  elif [[ $1 == --enable-shared ]]; then
    echo "SHARED = 1" >> config.mk
  elif [[ $1 == --disable-shared ]]; then
    echo "SHARED = 0" >> config.mk
  elif [[ $1 == --with-zlib ]]; then
    echo "USE_ZLIB = 1" >> config.mk
  elif [[ $1 == --with-zlib=* ]]; then
    echo "USE_ZLIB = 1" >> config.mk
    echo "LDFLAGS += -L${1#--with-zlib=}/lib" >> config.mk
    echo "LDLIBS += -lz" >> config.mk
  elif [[ $1 == --with-zlib-lib=* ]]; then
    echo "LDLIBS += ${1#--with-zlib-lib=}" >> config.mk
  elif [[ $1 == --with-zlib-include=* ]]; then
    echo "CFLAGS += ${1#--with-zlib-include=}" >> config.mk
  elif [[ $1 == --with-mpi ]]; then
    echo "USE_MPI = 1" >> config.mk
  elif [[ $1 == --without-mpi3 ]]; then
    echo "USE_MPI3 = 0" >> config.mk
  elif [[ $1 == --with-openmp ]]; then
    echo "LOOP_MODE = openmp" >> config.mk
  elif [[ $1 == --with-cuda ]]; then
    echo "LOOP_MODE = cuda" >> config.mk
  elif [[ $1 == --with-valgrind ]]; then
    echo "VALGRIND = valgrind" >> config.mk
  elif [[ $1 == --with-valgrind=* ]]; then
    echo "VALGRIND = ${1#--with-valgrind=}" >> config.mk
  elif [[ $1 == --with-patience ]]; then
    echo "PATIENT = 1" >> config.mk
  elif [[ $1 == --enable-xsdk-defaults ]]; then
    echo "XSDK = 1" >> config.mk
  elif [[ $1 == --disable-xsdk-defaults ]]; then
    echo "XSDK = 0" >> config.mk
  else
    echo "WARNING: ignoring option $1"
  fi
  shift
done

echo "XSDK ?= 0" >> config.mk
echo "DEBUG ?= \$(XSDK)" >> config.mk
echo "ifeq \"\$(DEBUG)\" \"1\"" >> config.mk
echo "  CFLAGS += -g -O0" >> config.mk
echo "endif" >> config.mk
echo "SHARED ?= \$(XSDK)" >> config.mk
echo "USE_MPI ?= \$(XSDK)" >> config.mk
